/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sra.kafka.inventory.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InventoryResponseAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4992167546435260222L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InventoryResponseAvroModel\",\"namespace\":\"com.sra.kafka.inventory.avro.model\",\"fields\":[{\"name\":\"inventoryId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"warehouseId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"InventoryStatus\",\"symbols\":[\"AVAILABLE\",\"OUT_OF_STOCK\",\"RESERVED\"]}},{\"name\":\"failureMessages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InventoryResponseAvroModel> ENCODER =
      new BinaryMessageEncoder<InventoryResponseAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InventoryResponseAvroModel> DECODER =
      new BinaryMessageDecoder<InventoryResponseAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InventoryResponseAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InventoryResponseAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InventoryResponseAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InventoryResponseAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InventoryResponseAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InventoryResponseAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InventoryResponseAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InventoryResponseAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String inventoryId;
  private java.lang.String warehouseId;
  private java.lang.String productId;
  private int quantity;
  private com.sra.kafka.inventory.avro.model.InventoryStatus status;
  private java.util.List<java.lang.String> failureMessages;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InventoryResponseAvroModel() {}

  /**
   * All-args constructor.
   * @param inventoryId The new value for inventoryId
   * @param warehouseId The new value for warehouseId
   * @param productId The new value for productId
   * @param quantity The new value for quantity
   * @param status The new value for status
   * @param failureMessages The new value for failureMessages
   */
  public InventoryResponseAvroModel(java.lang.String inventoryId, java.lang.String warehouseId, java.lang.String productId, java.lang.Integer quantity, com.sra.kafka.inventory.avro.model.InventoryStatus status, java.util.List<java.lang.String> failureMessages) {
    this.inventoryId = inventoryId;
    this.warehouseId = warehouseId;
    this.productId = productId;
    this.quantity = quantity;
    this.status = status;
    this.failureMessages = failureMessages;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return inventoryId;
    case 1: return warehouseId;
    case 2: return productId;
    case 3: return quantity;
    case 4: return status;
    case 5: return failureMessages;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: inventoryId = value$ != null ? value$.toString() : null; break;
    case 1: warehouseId = value$ != null ? value$.toString() : null; break;
    case 2: productId = value$ != null ? value$.toString() : null; break;
    case 3: quantity = (java.lang.Integer)value$; break;
    case 4: status = (com.sra.kafka.inventory.avro.model.InventoryStatus)value$; break;
    case 5: failureMessages = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'inventoryId' field.
   * @return The value of the 'inventoryId' field.
   */
  public java.lang.String getInventoryId() {
    return inventoryId;
  }


  /**
   * Sets the value of the 'inventoryId' field.
   * @param value the value to set.
   */
  public void setInventoryId(java.lang.String value) {
    this.inventoryId = value;
  }

  /**
   * Gets the value of the 'warehouseId' field.
   * @return The value of the 'warehouseId' field.
   */
  public java.lang.String getWarehouseId() {
    return warehouseId;
  }


  /**
   * Sets the value of the 'warehouseId' field.
   * @param value the value to set.
   */
  public void setWarehouseId(java.lang.String value) {
    this.warehouseId = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.lang.String getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public com.sra.kafka.inventory.avro.model.InventoryStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(com.sra.kafka.inventory.avro.model.InventoryStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'failureMessages' field.
   * @return The value of the 'failureMessages' field.
   */
  public java.util.List<java.lang.String> getFailureMessages() {
    return failureMessages;
  }


  /**
   * Sets the value of the 'failureMessages' field.
   * @param value the value to set.
   */
  public void setFailureMessages(java.util.List<java.lang.String> value) {
    this.failureMessages = value;
  }

  /**
   * Creates a new InventoryResponseAvroModel RecordBuilder.
   * @return A new InventoryResponseAvroModel RecordBuilder
   */
  public static com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder newBuilder() {
    return new com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder();
  }

  /**
   * Creates a new InventoryResponseAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InventoryResponseAvroModel RecordBuilder
   */
  public static com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder newBuilder(com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder other) {
    if (other == null) {
      return new com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder();
    } else {
      return new com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new InventoryResponseAvroModel RecordBuilder by copying an existing InventoryResponseAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new InventoryResponseAvroModel RecordBuilder
   */
  public static com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder newBuilder(com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel other) {
    if (other == null) {
      return new com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder();
    } else {
      return new com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for InventoryResponseAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InventoryResponseAvroModel>
    implements org.apache.avro.data.RecordBuilder<InventoryResponseAvroModel> {

    private java.lang.String inventoryId;
    private java.lang.String warehouseId;
    private java.lang.String productId;
    private int quantity;
    private com.sra.kafka.inventory.avro.model.InventoryStatus status;
    private java.util.List<java.lang.String> failureMessages;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.inventoryId)) {
        this.inventoryId = data().deepCopy(fields()[0].schema(), other.inventoryId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.warehouseId)) {
        this.warehouseId = data().deepCopy(fields()[1].schema(), other.warehouseId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.failureMessages)) {
        this.failureMessages = data().deepCopy(fields()[5].schema(), other.failureMessages);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing InventoryResponseAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.inventoryId)) {
        this.inventoryId = data().deepCopy(fields()[0].schema(), other.inventoryId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.warehouseId)) {
        this.warehouseId = data().deepCopy(fields()[1].schema(), other.warehouseId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.quantity)) {
        this.quantity = data().deepCopy(fields()[3].schema(), other.quantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.failureMessages)) {
        this.failureMessages = data().deepCopy(fields()[5].schema(), other.failureMessages);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'inventoryId' field.
      * @return The value.
      */
    public java.lang.String getInventoryId() {
      return inventoryId;
    }


    /**
      * Sets the value of the 'inventoryId' field.
      * @param value The value of 'inventoryId'.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder setInventoryId(java.lang.String value) {
      validate(fields()[0], value);
      this.inventoryId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'inventoryId' field has been set.
      * @return True if the 'inventoryId' field has been set, false otherwise.
      */
    public boolean hasInventoryId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'inventoryId' field.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder clearInventoryId() {
      inventoryId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'warehouseId' field.
      * @return The value.
      */
    public java.lang.String getWarehouseId() {
      return warehouseId;
    }


    /**
      * Sets the value of the 'warehouseId' field.
      * @param value The value of 'warehouseId'.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder setWarehouseId(java.lang.String value) {
      validate(fields()[1], value);
      this.warehouseId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'warehouseId' field has been set.
      * @return True if the 'warehouseId' field has been set, false otherwise.
      */
    public boolean hasWarehouseId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'warehouseId' field.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder clearWarehouseId() {
      warehouseId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.lang.String getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder setProductId(java.lang.String value) {
      validate(fields()[2], value);
      this.productId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder setQuantity(int value) {
      validate(fields()[3], value);
      this.quantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder clearQuantity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public com.sra.kafka.inventory.avro.model.InventoryStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder setStatus(com.sra.kafka.inventory.avro.model.InventoryStatus value) {
      validate(fields()[4], value);
      this.status = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder clearStatus() {
      status = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'failureMessages' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getFailureMessages() {
      return failureMessages;
    }


    /**
      * Sets the value of the 'failureMessages' field.
      * @param value The value of 'failureMessages'.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder setFailureMessages(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.failureMessages = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'failureMessages' field has been set.
      * @return True if the 'failureMessages' field has been set, false otherwise.
      */
    public boolean hasFailureMessages() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'failureMessages' field.
      * @return This builder.
      */
    public com.sra.kafka.inventory.avro.model.InventoryResponseAvroModel.Builder clearFailureMessages() {
      failureMessages = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InventoryResponseAvroModel build() {
      try {
        InventoryResponseAvroModel record = new InventoryResponseAvroModel();
        record.inventoryId = fieldSetFlags()[0] ? this.inventoryId : (java.lang.String) defaultValue(fields()[0]);
        record.warehouseId = fieldSetFlags()[1] ? this.warehouseId : (java.lang.String) defaultValue(fields()[1]);
        record.productId = fieldSetFlags()[2] ? this.productId : (java.lang.String) defaultValue(fields()[2]);
        record.quantity = fieldSetFlags()[3] ? this.quantity : (java.lang.Integer) defaultValue(fields()[3]);
        record.status = fieldSetFlags()[4] ? this.status : (com.sra.kafka.inventory.avro.model.InventoryStatus) defaultValue(fields()[4]);
        record.failureMessages = fieldSetFlags()[5] ? this.failureMessages : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InventoryResponseAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<InventoryResponseAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InventoryResponseAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<InventoryResponseAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










